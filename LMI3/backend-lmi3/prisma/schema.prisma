generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  phone     String?
  password  String
  salt      String
  type      Int      @default(0)
  
  orders Order[]
  addresses Address[]
}

model Sauce {
  id                   Int     @id @default(autoincrement())
  description          String
  name                 String  @unique
  price                Float
  type                 String  @default("sauce")
  image                String?
  available            Boolean @default(true)
  availableForDelivery Boolean @default(true)
  speciality           Boolean @default(false)
  
  tags       Tags[]
  orderItems OrderItem[]
  platSauces OrderItem[] @relation("PlatSauce")

  @@index([name])
  @@index([price])
}

model Tags {
  id          Int     @id @default(autoincrement())
  nom         String
  description String
  emoji       String
  recherchable Boolean @default(false)
  extras      Extra[]
  plats       Plat[]
  sauces      Sauce[]
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  allergen    Boolean @default(false)
  
  plats                      PlatIngredient[]
  removedFromOrderItems      OrderItemRemovedIngredient[]
  
  @@index([name])
}

model Extra {
  id                   Int     @id @default(autoincrement())
  nom                  String
  description          String
  price                Float
  type                 String  @default("extra")
  available            Boolean @default(true)
  availableForDelivery Boolean @default(true)
  speciality           Boolean @default(false)
  
  tags       Tags[]
  orderItems OrderItem[]
  orderItemExtras OrderItemExtra[] @relation("OrderItemExtras")
}

model PlatIngredient {
  id           Int     @id @default(autoincrement())
  platId       Int
  ingredientId Int
  removable    Boolean @default(true)
  essential    Boolean @default(false)
  
  plat       Plat       @relation(fields: [platId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([platId, ingredientId])
  @@index([platId])
  @@index([ingredientId])
}

model Plat {
  id                   Int     @id @default(autoincrement())
  description          String
  name                 String  @unique
  price                Float
  type                 String  @default("snack")
  image                String?
  available            Boolean @default(true)
  availableForDelivery Boolean @default(true)
  speciality           Boolean @default(false)
  IncludesSauce        Boolean @default(true)
  saucePrice           Float

  versions    PlatVersion[]
  tags        Tags[]
  ingredients PlatIngredient[]
  orderItems  OrderItem[]

  @@index([name])
  @@index([price])
}

model PlatVersion {
  id                   Int     @id @default(autoincrement())
  size                 String
  extraPrice           Float
  available            Boolean @default(true)
  availableForDelivery Boolean @default(true)
  speciality           Boolean @default(false)

  platId Int
  plat   Plat @relation(fields: [platId], references: [id], onDelete: Cascade)

  @@unique([platId, size])
  @@index([size])
  @@index([platId])
}

model Order {
  id                      Int      @id @default(autoincrement())
  userId                  Int?
  status                  Int   @default(0)
  totalPrice              Float
  deliveryFee             Float    @default(0)
  distanceExtra           Float    @default(0)
  tipAmount               Float    @default(0)
  finalTotal              Float
  message                 String?
  paymentMethod           String
  paymentDetails          Json?
  estimatedCompletionTime Int?     // in minutes
  distance                Float?   // in kilometers
  deliveryType            Int   @default(0)
  
  // Address information
  deliveryAddressId       Int?
  deliveryAddress         Address? @relation(fields: [deliveryAddressId], references: [id])
  
  // Coordinates
  clientLatitude          Float?
  clientLongitude         Float?
  deliveryBoyLatitude     Float?
  deliveryBoyLongitude    Float?
  restaurantLatitude      Float?   
  restaurantLongitude     Float?
  
  // Status timestamps
  createdAt               DateTime @default(now())
  confirmedAt             DateTime?
  canceledAt              DateTime?
  preparationStartedAt    DateTime?
  inDeliveryAt            DateTime?
  deliveredAt             DateTime?
  completedAt             DateTime?
  updatedAt               DateTime @updatedAt
  
  user  User? @relation(fields: [userId], references: [id])
  items OrderItem[]
  statusHistory OrderStatusHistory[]
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([deliveryAddressId])
}

model OrderStatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int
  status    String
  timestamp DateTime @default(now())
  notes     String?
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@index([orderId])
  @@index([timestamp])
}

model Address {
  id           Int    @id @default(autoincrement())
  userId       Int
  name         String @default("Home")
  street       String
  city         String
  postalCode   String
  country      String @default("France")
  latitude     Float?
  longitude    Float?
  instructions String?
  isDefault    Boolean @default(false)
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  
  @@index([userId])
}

model OrderItem {
  id          Int   @id @default(autoincrement())
  orderId     Int
  type        String // "plat", "sauce", "extra"
  platId      Int?
  sauceId     Int?
  extraId     Int?
  versionSize String?
  versionExtraPrice Float @default(0)
  quantity    Int   @default(1)
  unitPrice   Float
  totalPrice  Float
  
  // Sauce details for plats
  platSauceId    Int?
  platSaucePrice Float @default(0)
  
  order               Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  plat                Plat? @relation(fields: [platId], references: [id])
  sauce               Sauce? @relation(fields: [sauceId], references: [id])
  extra               Extra? @relation(fields: [extraId], references: [id])
  platSauce           Sauce? @relation("PlatSauce", fields: [platSauceId], references: [id])
  removedIngredients  OrderItemRemovedIngredient[]
  addedExtras         OrderItemExtra[]
  
  @@index([orderId])
  @@index([platId])
  @@index([sauceId])
  @@index([extraId])
}

model OrderItemExtra {
  id          Int   @id @default(autoincrement())
  orderItemId Int
  extraId     Int
  quantity    Int   @default(1)
  price       Float
  
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  extra     Extra     @relation("OrderItemExtras", fields: [extraId], references: [id])
  
  @@unique([orderItemId, extraId])
  @@index([orderItemId])
  @@index([extraId])
}

model OrderItemRemovedIngredient {
  id           Int @id @default(autoincrement())
  orderItemId  Int
  ingredientId Int
  
  orderItem  OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  
  @@unique([orderItemId, ingredientId])
  @@index([orderItemId])
  @@index([ingredientId])
}
