generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  password  String
  phone     String?
  salt      String
  type      Int       @default(0)
  addresses Address[]
  orders    Order[]
}

model Sauce {
  id                   Int         @id @default(autoincrement())
  description          String
  name                 String      @unique
  price                Float
  type                 String      @default("sauce")
  image                String?
  available            Boolean     @default(true)
  availableForDelivery Boolean     @default(true)
  speciality           Boolean     @default(false)
  platSauces           OrderItem[] @relation("PlatSauce")
  orderItems           OrderItem[]
  tags                 Tags[]      @relation("SauceToTags")

  @@index([name])
  @@index([price])
}

model Tags {
  id           Int     @id @default(autoincrement())
  nom          String
  description  String
  emoji        String
  recherchable Boolean @default(false)
  extras       Extra[] @relation("ExtraToTags")
  plats        Plat[]  @relation("PlatToTags")
  sauces       Sauce[] @relation("SauceToTags")
}

model Ingredient {
  id                    Int                          @id @default(autoincrement())
  name                  String
  description           String?
  allergen              Boolean                      @default(false)
  removedFromOrderItems OrderItemRemovedIngredient[]
  plats                 PlatIngredient[]

  @@index([name])
}

model Extra {
  id                   Int              @id @default(autoincrement())
  nom                  String
  description          String
  price                Float
  type                 String           @default("extra")
  available            Boolean          @default(true)
  availableForDelivery Boolean          @default(true)
  speciality           Boolean          @default(false)
  orderItems           OrderItem[]
  orderItemExtras      OrderItemExtra[] @relation("OrderItemExtras")
  tags                 Tags[]           @relation("ExtraToTags")
}

model PlatIngredient {
  id           Int        @id @default(autoincrement())
  platId       Int
  ingredientId Int
  removable    Boolean    @default(true)
  essential    Boolean    @default(false)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  plat         Plat       @relation(fields: [platId], references: [id], onDelete: Cascade)

  @@unique([platId, ingredientId])
  @@index([platId])
  @@index([ingredientId])
}

model Plat {
  id                   Int              @id @default(autoincrement())
  description          String
  name                 String           @unique
  price                Float
  type                 String           @default("snack")
  image                String?
  available            Boolean          @default(true)
  availableForDelivery Boolean          @default(true)
  speciality           Boolean          @default(false)
  IncludesSauce        Boolean          @default(true)
  saucePrice           Float
  orderItems           OrderItem[]
  ingredients          PlatIngredient[]
  versions             PlatVersion[]
  tags                 Tags[]           @relation("PlatToTags")

  @@index([name])
  @@index([price])
}

model PlatVersion {
  id                   Int     @id @default(autoincrement())
  size                 String
  extraPrice           Float
  available            Boolean @default(true)
  availableForDelivery Boolean @default(true)
  speciality           Boolean @default(false)
  platId               Int
  plat                 Plat    @relation(fields: [platId], references: [id], onDelete: Cascade)

  @@unique([platId, size])
  @@index([size])
  @@index([platId])
}

model Order {
  id                      Int                  @id @default(autoincrement())
  userId                  Int?
  status                  Int                  @default(0)
  totalPrice              Float
  deliveryFee             Float                @default(0)
  distanceExtra           Float                @default(0)
  tipAmount               Float                @default(0)
  finalTotal              Float
  message                 String?
  paymentMethod           String
  paymentDetails          Json?
  estimatedCompletionTime Int?
  distance                Float?
  deliveryType            Int                  @default(0)
  deliveryAddressId       Int?
  clientLatitude          Float?
  clientLongitude         Float?
  deliveryBoyLatitude     Float?
  deliveryBoyLongitude    Float?
  restaurantLatitude      Float?
  restaurantLongitude     Float?
  createdAt               DateTime             @default(now())
  confirmedAt             DateTime?
  canceledAt              DateTime?
  preparationStartedAt    DateTime?
  inDeliveryAt            DateTime?
  deliveredAt             DateTime?
  completedAt             DateTime?
  updatedAt               DateTime             @updatedAt
  deliveryAddress         Address?             @relation(fields: [deliveryAddressId], references: [id])
  user                    User?                @relation(fields: [userId], references: [id])
  items                   OrderItem[]
  statusHistory           OrderStatusHistory[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([deliveryAddressId])
}

model OrderStatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int
  status    String
  timestamp DateTime @default(now())
  notes     String?
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([timestamp])
}

model Address {
  id           Int     @id @default(autoincrement())
  userId       Int
  name         String  @default("Home")
  street       String
  city         String
  postalCode   String
  country      String  @default("France")
  latitude     Float?
  longitude    Float?
  instructions String?
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@index([userId])
}

model OrderItem {
  id                 Int                          @id @default(autoincrement())
  orderId            Int
  type               String
  platId             Int?
  sauceId            Int?
  extraId            Int?
  versionSize        String?
  versionExtraPrice  Float                        @default(0)
  quantity           Int                          @default(1)
  unitPrice          Float
  totalPrice         Float
  platSauceId        Int?
  platSaucePrice     Float                        @default(0)
  extra              Extra?                       @relation(fields: [extraId], references: [id])
  order              Order                        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  plat               Plat?                        @relation(fields: [platId], references: [id])
  platSauce          Sauce?                       @relation("PlatSauce", fields: [platSauceId], references: [id])
  sauce              Sauce?                       @relation(fields: [sauceId], references: [id])
  addedExtras        OrderItemExtra[]
  removedIngredients OrderItemRemovedIngredient[]

  @@index([orderId])
  @@index([platId])
  @@index([sauceId])
  @@index([extraId])
}

model OrderItemExtra {
  id          Int       @id @default(autoincrement())
  orderItemId Int
  extraId     Int
  quantity    Int       @default(1)
  price       Float
  extra       Extra     @relation("OrderItemExtras", fields: [extraId], references: [id])
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, extraId])
  @@index([orderItemId])
  @@index([extraId])
}

model OrderItemRemovedIngredient {
  id           Int        @id @default(autoincrement())
  orderItemId  Int
  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  orderItem    OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, ingredientId])
  @@index([orderItemId])
  @@index([ingredientId])
}
